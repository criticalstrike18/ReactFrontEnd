---
// ExactProductCard.astro
export interface Props {
  productName?: string;
  price?: number;
  colors?: string[];
  sizes?: string[];
}

const { 
  productName = "Men's Cotton T-Shirt",
  price = 29.99,
  colors = ["#4CAF50", "#2196F3", "#4CAF50"], // Green, Blue, Green
  sizes = ["S", "M", "L", "XL"]
} = Astro.props;
---

<div class="product-card">
  <div class="dashed-line top-line">
    <span class="dash">-------------------------------</span>
  </div>
  
  <p class="option-label">{productName}</p>
  <p class="price">${price.toFixed(2)}</p>

  <p class="option-label">Choose Color:</p>
  <div class="color-options">
    {colors.map((color, index) => (
      <button class="color-btn" data-color={color}>
        <span class="bracket">[</span>
        <span class="color-dot" style={`background-color: ${color};`}></span>
        <span class="bracket">]</span>
      </button>
    ))}
  </div>

  <p class="option-label">Choose Size:</p>
  <div class="size-options">
    {sizes.map((size) => (
      <button class="size-btn" data-size={size}>
        <span class="bracket">[</span><span class="size-text">{size}</span><span class="bracket">]</span>
      </button>
    ))}
  </div>
  
  <button class="add-to-cart">
    <span class="bracket">[</span>Add to Cart<span class="bracket">]</span>
  </button>
  
  <div class="dashed-line bottom-line">
    <span class="dash">-------------------------------</span>
  </div>
</div>

<style>
  .product-card {
    font-family: Noto Sans Mono;
    max-width: 340px;
    padding: 0 10px;
    background-color: #fff;
    margin: 0;
  }
  
  .dashed-line {
    font-size: 14px;
  }
  
  .dash {
    letter-spacing: 0;
    white-space: nowrap;
  }
  
  .top-line {
  }
  
  .bottom-line {
    margin-top: 8px;
    color: #ff0000;
  }
  
  .price {
    margin: 2px 0 30px 0;
    font-size:12px;
  }
  
  .option-label {
    margin: 8px 0 5px 0;
    font-size: 14px;
    color: #333;
  }
  
  .color-options {
    display: flex;
    gap: 5px;
    margin-bottom: 30px;
  }
  
  .color-btn {
    background: none;
    border: none;
    padding: 0;
    cursor: pointer;
    outline: none;
    display: flex;
    align-items: center;
    font-family: monospace;
  }
  
  .color-dot {
    display: inline-block;
    width: 12px;
    height: 12px;
    border-radius: 50%;
    position: relative;
  }
  
  /* New hover style for color dots */
  .color-btn:hover .color-dot::after {
    content: '';
    position: absolute;
    left: 0;
    bottom: -2px;
    width: 100%;
    height: 1px;
    background-color: #000;
  }
  
  /* Selection style for color dots */
  .color-btn.selected .color-dot::after {
    content: '';
    position: absolute;
    left: 0;
    bottom: -2px;
    width: 100%;
    height: 1px;
    background-color: #000;
  }
  
  /* Force specific colors */
  .color-options .color-btn:nth-child(3) .color-dot {
    background-color: #4CAF50 !important; /* Force Green */
  }
  
  .size-options {
    display: flex;
    gap: 5px;
    margin-bottom: 30px;
  }
  
  .size-btn {
    background: none;
    border: none;
    padding: 0;
    cursor: pointer;
    font-family: monospace;
    font-size: 14px;
    outline: none;
    color: #333;
  }
  
  .bracket {
    color: #333;
  }
  
  .size-text {
    font-weight: normal;
    position: relative;
  }
  
  /* New hover style for size text (underline on hover) */
  .size-btn:hover .size-text::after {
    content: '';
    position: absolute;
    left: 0;
    bottom: -1px;
    width: 100%;
    height: 1px;
    background-color: currentColor;
  }
  
  /* Selection style for size text (underline when selected) */
  .size-btn.selected .size-text::after {
    content: '';
    position: absolute;
    left: 0;
    bottom: -1px;
    width: 100%;
    height: 1px;
    background-color: currentColor;
  }
  
  /* Apply specific styling to match the example */
  .size-btn[data-size="S"] .size-text {
    color: #4CAF50;
  }
  
  .size-btn[data-size="M"] .size-text {
    color: #2196F3;
  }
  
  .size-btn[data-size="L"] .size-text {
    color: #4CAF50;
  }
  
  .size-btn[data-size="XL"] .size-text {
    color: #2196F3;
  }
  
  .add-to-cart {
    margin-top: 5px;
    background: none;
    border: none;
    color: #ff0000;
    cursor: pointer;
    padding: 0;
    font-family: monospace;
    font-size: 14px;
    outline: none;
  }
  
  .add-to-cart .bracket {
    color: #ff0000;
  }
  
  /* Hover effect for Add to Cart button */
  .add-to-cart:hover {
    text-decoration: underline;
  }
</style>

<script>
  // Client-side JavaScript for interactivity
  function initializeButtons() {
    const colorButtons = document.querySelectorAll('.color-btn');
    const sizeButtons = document.querySelectorAll('.size-btn');
    
    // Set initial selection
    if (colorButtons.length > 0) colorButtons[0].classList.add('selected');
    if (sizeButtons.length > 0) {
      // Find the M size button and select it by default
      const mButton = Array.from(sizeButtons).find(btn => btn.getAttribute('data-size') === 'M');
      if (mButton) mButton.classList.add('selected');
    }
    
    colorButtons.forEach(button => {
      button.addEventListener('click', () => {
        // Remove selection from all color buttons
        colorButtons.forEach(btn => btn.classList.remove('selected'));
        // Add selection to clicked button
        button.classList.add('selected');
      });
    });
    
    sizeButtons.forEach(button => {
      button.addEventListener('click', () => {
        // Remove selection from all size buttons
        sizeButtons.forEach(btn => btn.classList.remove('selected'));
        // Add selection to clicked button
        button.classList.add('selected');
      });
    });
  }

  // Initialize on regular page load
  document.addEventListener('DOMContentLoaded', initializeButtons);
  
  // Re-initialize when the product card appears through a dynamic transition
  document.addEventListener('astro:page-load', initializeButtons);
</script>