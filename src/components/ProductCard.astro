---
// ExactProductCard.astro
export interface Props {
  productName?: string;
  price?: number;
  colors?: string[];
  sizes?: string[];
}

const { 
  productName = "Men's Cotton T-Shirt",
  price = 29.99,
  colors = ["#4CAF50", "#2196F3", "#4CAF50"], // Green, Blue, Green
  sizes = ["S", "M", "L", "XL"]
} = Astro.props;
---

<div class="product-card">
  <div class="dashed-line top-line">
    <span class="dash">-------------------------------</span>
  </div>
  
  <p class="option-label">{productName}</p>
  <p class="price">${price.toFixed(2)}</p>

  <p class="option-label">Choose Color:</p>
  <div class="color-options">
    {colors.map((color, index) => (
      <button class="color-btn" data-color={color}>
        <span class="bracket">[</span>
        <span class="color-dot" style={`background-color: ${color};`}></span>
        <span class="bracket">]</span>
      </button>
    ))}
  </div>

  <p class="option-label">Choose Size:</p>
  <div class="size-options">
    {sizes.map((size) => (
      <button class="size-btn" data-size={size}>
        <span class="bracket">[</span><span class="size-text">{size}</span><span class="bracket">]</span>
      </button>
    ))}
  </div>
  
  <button class="add-to-cart">
    <span class="bracket">[</span>Add to Cart<span class="bracket">]</span>
  </button>
  
  <div class="dashed-line bottom-line">
    <span class="dash">-------------------------------</span>
  </div>
</div>

<script>
  // Client-side JavaScript for interactivity
  function initializeButtons() {
    const colorButtons = document.querySelectorAll('.color-btn');
    const sizeButtons = document.querySelectorAll('.size-btn');
    
    // Set initial selection
    if (colorButtons.length > 0) colorButtons[0].classList.add('selected');
    if (sizeButtons.length > 0) {
      // Find the M size button and select it by default
      const mButton = Array.from(sizeButtons).find(btn => btn.getAttribute('data-size') === 'M');
      if (mButton) mButton.classList.add('selected');
    }
    
    colorButtons.forEach(button => {
      button.addEventListener('click', () => {
        // Remove selection from all color buttons
        colorButtons.forEach(btn => btn.classList.remove('selected'));
        // Add selection to clicked button
        button.classList.add('selected');
      });
    });
    
    sizeButtons.forEach(button => {
      button.addEventListener('click', () => {
        // Remove selection from all size buttons
        sizeButtons.forEach(btn => btn.classList.remove('selected'));
        // Add selection to clicked button
        button.classList.add('selected');
      });
    });
  }

  // Initialize on regular page load
  document.addEventListener('DOMContentLoaded', initializeButtons);
  
  // Re-initialize when the product card appears through a dynamic transition
  document.addEventListener('astro:page-load', initializeButtons);
</script>